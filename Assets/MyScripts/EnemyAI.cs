using UnityEngine;
// Part of the code was generated by deepseek and then modified and tested.
public class EnemyAI : MonoBehaviour
{
    [Header("Patrol Parameters")]
    [SerializeField] private Transform[] patrolPoints;
    [SerializeField] private float patrolSpeed = 2f;
    [SerializeField] private float waitTime = 1f;

    [Header("Detection Parameters")]
    [SerializeField] private float detectionRange = 8f;
    [SerializeField] private float chargeTriggerDistance = 4f;
    [SerializeField] private LayerMask detectionLayers;
    [SerializeField] private LayerMask playerLayer;
    [SerializeField] private LayerMask obstacleLayer;

    [Header("Charge Parameters")]
    [SerializeField] private float chargeSpeed = 8f;
    [SerializeField] private float chargeCooldown = 3f;
    [SerializeField] private float chargeDuration = 1.5f;
    [SerializeField] private float stunDuration = 2f;

    [Header("Debug")]
    [SerializeField] private bool enableDetectionLogging = true;
    [SerializeField] private float logUpdateInterval = 0.5f;
    [SerializeField] private bool debugChargeConditions = true;

    [Header("State")]
    [SerializeField] private EnemyState currentState = EnemyState.Patrol;
    [SerializeField] private bool isFacingRight = true;
    [SerializeField] private bool isStunned = false;

    private int currentPatrolIndex = 0;
    private float waitTimer = 0f;
    private float chargeTimer = 0f;
    private float stunTimer = 0f;
    private float currentChargeTime = 0f;
    private Vector2 chargeDirection;
    private Animator animator;
    private Rigidbody2D rb;
    private GameObject lastSeenPlayer;
    private float detectionLogTimer = 0f;

    // Enemy state enum
    public enum EnemyState
    {
        Patrol,
        Chase,
        Charge,
        Stunned,
        HitWall
    }

    private void Start()
    {
        animator = GetComponent<Animator>();
        rb = GetComponent<Rigidbody2D>();

        if (patrolPoints.Length < 2)
        {
            Debug.LogError("At least 2 patrol points are required!", gameObject);
        }

        detectionLayers = playerLayer | obstacleLayer;

        UpdateFacingDirection();
        Debug.Log("Enemy initialization completed", gameObject);
        LogLayerMaskInfo();
    }

    // Log layer mask information
    private void LogLayerMaskInfo()
    {
        string layerNames = "";
        for (int i = 0; i < 32; i++)
        {
            if (((int)detectionLayers & (1 << i)) != 0)
            {
                layerNames += LayerMask.LayerToName(i) + ", ";
            }
        }

        Debug.Log($"[Enemy] Detection layers: {layerNames}", gameObject);
    }

    private void Update()
    {
        DebugDrawState();
        UpdateDetectionLogging();

        switch (currentState)
        {
            case EnemyState.Patrol:
                UpdatePatrolState();
                CheckForPlayer();
                break;

            case EnemyState.Chase:
                UpdateChaseState();
                CheckChargeCondition();
                break;

            case EnemyState.Charge:
                UpdateChargeState();
                CheckChargeCollision();
                break;

            case EnemyState.Stunned:
                UpdateStunState();
                break;

            case EnemyState.HitWall:
                UpdateHitWallState();
                break;
        }

        if (chargeTimer > 0) chargeTimer -= Time.deltaTime;
        if (stunTimer > 0) stunTimer -= Time.deltaTime;

        UpdateAnimation();
    }

    // Draw state information
    private void DebugDrawState()
    {
#if UNITY_EDITOR
        GUIStyle style = new GUIStyle();
        style.normal.textColor = Color.white;
        style.fontSize = 16;

        string stateText = $"State: {currentState}";
        if (currentState == EnemyState.Chase && lastSeenPlayer != null)
        {
            float dist = Vector2.Distance(transform.position, lastSeenPlayer.transform.position);
            stateText += $"\nChasing - Distance: {dist:F1}m";
        }
        else if (currentState == EnemyState.Charge)
        {
            stateText += $"\nCharging - Remaining time: {chargeDuration - currentChargeTime:F1}s";
        }

        Vector3 screenPos = Camera.main.WorldToScreenPoint(transform.position + Vector3.up * 1.5f);
        if (screenPos.z > 0 && Camera.main != null)
        {
            // UnityEditor.Handles.Label(transform.position + Vector3.up * 1.5f, stateText, style);
        }
#endif
    }

    // Update detection logging
    private void UpdateDetectionLogging()
    {
        if (!enableDetectionLogging) return;

        detectionLogTimer += Time.deltaTime;
        if (detectionLogTimer >= logUpdateInterval)
        {
            detectionLogTimer = 0f;
            LogDetectedObjects();
        }
    }

    // Log all detected objects
    private void LogDetectedObjects()
    {
        string logMessage = $"[{name}] Detected objects:";
        bool foundAnything = false;

        GameObject player = FindPlayerInSight();
        if (player != null)
        {
            foundAnything = true;
            logMessage += $"\n  Player: {player.name} - Distance: {Vector2.Distance(transform.position, player.transform.position):F1}m";
        }

        LogRaycastResults();

        if (!foundAnything)
        {
            logMessage += " None";
        }

        Debug.Log(logMessage, gameObject);
    }

    // Log raycast results
    private void LogRaycastResults()
    {
        // Right detection
        RaycastHit2D rightHit = Physics2D.Raycast(
            transform.position,
            Vector2.right,
            detectionRange,
            detectionLayers
        );

        if (rightHit.collider != null)
        {
            string layerName = LayerMask.LayerToName(rightHit.collider.gameObject.layer);
            Debug.Log($"[Enemy] Right ray detected: {rightHit.collider.name} ({layerName}) - Distance: {rightHit.distance:F1}m", gameObject);
        }

        // Left detection
        RaycastHit2D leftHit = Physics2D.Raycast(
            transform.position,
            Vector2.left,
            detectionRange,
            detectionLayers
        );

        if (leftHit.collider != null)
        {
            string layerName = LayerMask.LayerToName(leftHit.collider.gameObject.layer);
            Debug.Log($"[Enemy] Left ray detected: {leftHit.collider.name} ({layerName}) - Distance: {leftHit.distance:F1}m", gameObject);
        }
    }

    // Update patrol state
    private void UpdatePatrolState()
    {
        if (waitTimer > 0)
        {
            waitTimer -= Time.deltaTime;
            rb.velocity = Vector2.zero;
            return;
        }

        Vector2 targetPosition = patrolPoints[currentPatrolIndex].position;
        Vector2 direction = (targetPosition - (Vector2)transform.position).normalized;

        rb.velocity = new Vector2(direction.x * patrolSpeed, rb.velocity.y);

        if (Vector2.Distance(transform.position, targetPosition) < 0.1f)
        {
            currentPatrolIndex = (currentPatrolIndex + 1) % patrolPoints.Length;
            waitTimer = waitTime;
            UpdateFacingDirection();
        }
    }

    // Update chase state - Modified: Force turn to player
    private void UpdateChaseState()
    {
        if (lastSeenPlayer == null || !lastSeenPlayer.activeSelf)
        {
            TransitionToState(EnemyState.Patrol, "Lost player target");
            return;
        }

        Vector2 direction = (lastSeenPlayer.transform.position - transform.position).normalized;
        rb.velocity = new Vector2(direction.x * patrolSpeed, rb.velocity.y);

        // Force turn to player
        if ((direction.x > 0 && !isFacingRight) || (direction.x < 0 && isFacingRight))
        {
            Flip();
        }

        Debug.DrawLine(transform.position, lastSeenPlayer.transform.position, Color.yellow);
    }

    // Update charge state
    private void UpdateChargeState()
    {
        currentChargeTime += Time.deltaTime;
        rb.velocity = new Vector2(chargeDirection.x * chargeSpeed, rb.velocity.y);

        if (currentChargeTime >= chargeDuration)
        {
            TransitionToState(EnemyState.Patrol, "Charge time ended");
        }
    }

    // Update stun state
    private void UpdateStunState()
    {
        if (stunTimer <= 0)
        {
            TransitionToState(EnemyState.Patrol, "Stun ended");
        }
    }

    // Update hit wall state
    private void UpdateHitWallState()
    {
        rb.velocity = Vector2.zero;

        if (waitTimer > 0)
        {
            waitTimer -= Time.deltaTime;
            if (waitTimer <= 0)
            {
                Flip();
                TransitionToState(EnemyState.Patrol, "Recovered after hitting wall");
            }
        }
    }

    // State transition method
    private void TransitionToState(EnemyState newState, string reason)
    {
        currentState = newState;

        switch (newState)
        {
            case EnemyState.Charge:
                currentChargeTime = 0f;
                break;

            case EnemyState.HitWall:
                waitTimer = 1f;
                break;

            case EnemyState.Stunned:
                stunTimer = stunDuration;
                break;
        }
    }

    // Check if can charge - Modified: Remove direction restriction
    private void CheckChargeCondition()
    {
        if (debugChargeConditions)
        {
            Debug.Log($"[Enemy] Checking charge conditions - Cooldown remaining: {chargeTimer:F1}s", gameObject);
        }

        // 1. Check cooldown time
        if (chargeTimer > 0)
        {
            if (debugChargeConditions) Debug.Log("[Enemy] Charge on cooldown, cannot charge", gameObject);
            return;
        }

        // 2. Check if player exists
        if (lastSeenPlayer == null)
        {
            if (debugChargeConditions) Debug.Log("[Enemy] Player does not exist, cannot charge", gameObject);
            TransitionToState(EnemyState.Patrol, "Lost player while chasing");
            return;
        }

        // 3. Calculate distance to player
        float distanceToPlayer = Vector2.Distance(transform.position, lastSeenPlayer.transform.position);

        if (debugChargeConditions)
        {
            Debug.Log($"[Enemy] Distance to player: {distanceToPlayer:F1}m | Charge trigger distance: {chargeTriggerDistance}m", gameObject);
        }

        // 4. Check if player is within charge trigger distance
        if (distanceToPlayer > chargeTriggerDistance)
        {
            if (debugChargeConditions) Debug.Log("[Enemy] Player too far, cannot charge", gameObject);
            return;
        }

        // 5. Check if line of sight is blocked (Modified: Use direction facing player)
        Vector2 directionToPlayer = (lastSeenPlayer.transform.position - transform.position).normalized;

        RaycastHit2D hit = Physics2D.Raycast(
            transform.position,
            directionToPlayer,
            distanceToPlayer,
            obstacleLayer
        );

        if (hit.collider != null)
        {
            if (debugChargeConditions)
            {
                Debug.Log($"[Enemy] Line of sight blocked: {hit.collider.name} - Distance: {hit.distance:F1}m", gameObject);
                Debug.DrawLine(transform.position, hit.point, Color.magenta, 2f);
            }
            return;
        }

        // All conditions met, initiate charge
        chargeDirection = directionToPlayer;

        if (debugChargeConditions)
        {
            Debug.Log($"[Enemy] All conditions met! Initiating charge, direction: {directionToPlayer}", gameObject);
            Debug.DrawLine(transform.position, transform.position + (Vector3)directionToPlayer * 3f, Color.red, 2f);
        }

        TransitionToState(EnemyState.Charge, $"Player distance {distanceToPlayer:F1}m, initiating charge");
        chargeTimer = chargeCooldown;
    }

    // Check charge collision
    private void CheckChargeCollision()
    {
        float rayDistance = 0.5f;
        Vector2 rayDirection = chargeDirection; // Use actual charge direction
        RaycastHit2D hit = Physics2D.Raycast(
            transform.position,
            rayDirection,
            rayDistance,
            obstacleLayer
        );

        if (hit.collider != null)
        {
            TransitionToState(EnemyState.HitWall, $"Charge hit {hit.collider.name}");
        }
    }

    // Check if player is in sight
    private void CheckForPlayer()
    {
        if (isStunned) return;

        GameObject player = FindPlayerInSight();
        if (player != null && currentState != EnemyState.Charge && currentState != EnemyState.HitWall)
        {
            lastSeenPlayer = player;
            TransitionToState(EnemyState.Chase, $"Player found: {player.name}");
        }
    }

    // Find player in line of sight
    private GameObject FindPlayerInSight()
    {
        // Detect player on both left and right sides
        Vector2 rightDirection = Vector2.right;
        Vector2 leftDirection = Vector2.left;

        // Right ray detection
        RaycastHit2D rightHit = Physics2D.Raycast(
            transform.position,
            rightDirection,
            detectionRange,
            detectionLayers
        );

        // Left ray detection
        RaycastHit2D leftHit = Physics2D.Raycast(
            transform.position,
            leftDirection,
            detectionRange,
            detectionLayers
        );

        // Draw detection rays
        Debug.DrawLine(transform.position, transform.position + (Vector3)rightDirection * detectionRange, Color.blue);
        Debug.DrawLine(transform.position, transform.position + (Vector3)leftDirection * detectionRange, Color.blue);

        // Process right detection result
        if (rightHit.collider != null)
        {
            Debug.DrawLine(transform.position, rightHit.point, Color.red);

            if ((1 << rightHit.collider.gameObject.layer) == (1 << LayerMask.NameToLayer("Player")))
            {
                return rightHit.collider.gameObject;
            }
        }

        // Process left detection result
        if (leftHit.collider != null)
        {
            Debug.DrawLine(transform.position, leftHit.point, Color.red);

            if ((1 << leftHit.collider.gameObject.layer) == (1 << LayerMask.NameToLayer("Player")))
            {
                return leftHit.collider.gameObject;
            }
        }

        return null;
    }

    // Handle being stomped on the head
    public void StompHead()
    {
        if (isStunned) return;

        TransitionToState(EnemyState.Stunned, "Stomped on head");
        isStunned = true;

        if (animator != null)
        {
            animator.SetBool("isStunned", true);
        }

        Collider2D[] colliders = GetComponents<Collider2D>();
        foreach (Collider2D collider in colliders)
        {
            collider.enabled = false;
        }

        Invoke("EnableColliders", stunDuration);
    }

    // Enable colliders
    private void EnableColliders()
    {
        Collider2D[] colliders = GetComponents<Collider2D>();
        foreach (Collider2D collider in colliders)
        {
            collider.enabled = true;
        }

        if (animator != null)
        {
            animator.SetBool("isStunned", false);
        }
    }

    // Update facing direction
    private void UpdateFacingDirection()
    {
        if (patrolPoints.Length < 2) return;

        Vector2 direction = patrolPoints[currentPatrolIndex].position - transform.position;
        if ((direction.x > 0 && !isFacingRight) || (direction.x < 0 && isFacingRight))
        {
            Flip();
        }
    }

    // Flip direction
    private void Flip()
    {
        isFacingRight = !isFacingRight;
        transform.localScale = new Vector3(-transform.localScale.x, transform.localScale.y, transform.localScale.z);
    }

    // Update animation
    private void UpdateAnimation()
    {
        if (animator == null) return;

        animator.SetFloat("moveSpeed", Mathf.Abs(rb.velocity.x));
        animator.SetInteger("state", (int)currentState);
    }

    // Draw helper lines in the editor
    private void OnDrawGizmosSelected()
    {
        // Draw patrol path
        if (patrolPoints != null && patrolPoints.Length > 1)
        {
            Gizmos.color = Color.yellow;
            for (int i = 0; i < patrolPoints.Length - 1; i++)
            {
                Gizmos.DrawLine(patrolPoints[i].position, patrolPoints[i + 1].position);
            }
            Gizmos.DrawLine(patrolPoints[patrolPoints.Length - 1].position, patrolPoints[0].position);
        }

        // Draw detection range and charge trigger range
        Gizmos.color = Color.cyan;
        Gizmos.DrawWireSphere(transform.position, chargeTriggerDistance);

        Gizmos.color = Color.blue;
        Gizmos.DrawLine(transform.position, transform.position + Vector3.right * detectionRange);
        Gizmos.DrawLine(transform.position, transform.position + Vector3.left * detectionRange);

        // Draw charge direction
        if (currentState == EnemyState.Charge)
        {
            Gizmos.color = Color.red;
            Gizmos.DrawLine(transform.position, transform.position + (Vector3)chargeDirection * 2f);

            Gizmos.color = Color.magenta;
            Vector3 chargeEndPos = transform.position + (Vector3)chargeDirection * chargeSpeed * chargeDuration;
            Gizmos.DrawWireSphere(chargeEndPos, 0.3f);
        }
    }
}
